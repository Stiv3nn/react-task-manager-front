// 10 --> CREAZIONE DEL FILE CONTEXT API (GlobalContext) PER LA GESTIONE DELLO STATO GLOBALE DELL'APPLICAZIONE E IMPORTO CREATECONTEXT, USESTATE (MILESOTNE 2)
import { createContext, useEffect, useState } from "react";
// 14 --> DESTRUTTURARE L'OGGETTO VITE_API_URL, UTILIZZANDO QUSTO MODO PER IMPORTARE LE VARIABILI DELL'AMBIENTE "import.meta.env" (MILESTONE 2)
const { VITE_API_URL } = import.meta.env;

// GLOBALCONTEXT E' UN OGGETTO
export const GlobalContext = createContext();

// 11 --> EXPORTO IL PROVIDER A CUI PASSIAMO ALL'INTERNO CHILDREN, CHE E' IL PROP CHE RAPPRESENTA QUALSIASI CHILDREN CHE INSERISCO ALL'INTERO DI QUESTO COMPONENTE (MILESTONE 2)
export function GlobalProvider({ children }) {
    // 12 --> CREAZIONE DELLO STATO ALL'INTERNO DEL PROVIDER, PER MEMORIZZARE LA LISTA DEI TASK, INIZALMENTE UN ARRAY VUOTA (MILESOTNE 2)
    const [tasks, setTasks] = useState([]);

    // 13 --> EFFETTUARE UNA RICHIESTA GET A /TASKS AL CARICAMENTO DELL'APP, UTILLIZZANDO USEEFFECT E SALVARE I DATI NELLA STATE E TRAMITE QUESTO FETCH LEGGEREMO LE NOSTRE TASKS (MILESTONE 2)
    // FARE UN FETCH A TASKS SIGNIFICA PRENDERE IL NOSTRO API URL SALVATO NEL FILE .ENV CHE SI CHIAMA VITE_API_URL E DESTRUTTURARLO
    useEffect(() => {
        // 15 --> STIMAO ANDANDO A FARE UNA RICHIESTA AL NOSTRO SERVER AL TASKS E IL NOSTRO METODO E' UN GET E NON MI SERVE SPECIFICARE ALL'INTERNO DEL FETCH (MILESOTNE 2)
        fetch(`${VITE_API_URL}/tasks`)
        // 16 --> ANDIAMO A FARE UN .THEN --> DOVE ANDIAMO A FARE IL NOSTRO RESPONSE.JSON (MILESTONE 2)
        .then(res => res.json())
        // 17 --> AL CUI RESOLVE VOGLIO PRENDERE QUESTO "DATA" E FARCI QUALCOSA CIOE' SALVARLI NELLO STATE (MILESTONE 2)
        .then(data => setTasks(data))
        // 18 --> FARE UN .CATCH PER UN EVENTUALE ERRORE (MILESTONE 2)
        .catch(err => console.error(err))
    }, []);

    return (
        // LE DOPPIE PARENTESI GRAFFE SIGNIFICA CHE STO PASSANDO UN OGGETTO ALL'INTERNO DI VALUE --> QUNDI ABBIAMO UN USESTATE ACCESSIBILE ALL'INTERNO DEL NOSTRO PROVIDER
        <GlobalContext.Provider value={ { tasks, setTasks } }> 
            {children}
        </GlobalContext.Provider>
    )
}

